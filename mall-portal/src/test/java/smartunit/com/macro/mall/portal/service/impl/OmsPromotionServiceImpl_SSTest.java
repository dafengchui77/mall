/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.portal.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.model.OmsCartItem;
import com.macro.mall.model.PmsProductFullReduction;
import com.macro.mall.model.PmsProductLadder;
import com.macro.mall.model.PmsSkuStock;
import com.macro.mall.portal.dao.PortalProductDao;
import com.macro.mall.portal.domain.CartPromotionItem;
import com.macro.mall.portal.domain.PromotionProduct;
import com.macro.mall.portal.service.impl.OmsPromotionServiceImpl;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.asm.Opcodes;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OmsPromotionServiceImpl_SSTest extends OmsPromotionServiceImpl_SSTest_scaffolding {
// allCoveredLines:[24, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 106, 108, 109, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 145, 146, 147, 148, 149, 150, 151, 152, 153, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 177, 180, 183, 184, 185, 187, 188, 195, 196, 197, 198, 199, 200, 201, 202, 203, 211, 214, 217, 218, 219, 221, 222, 229, 230, 231, 232, 233, 240, 241, 243, 244, 245, 246, 247, 254, 255, 256, 258, 259, 266, 267, 268, 270, 271]

  @Test(timeout = 4000)
  public void test_calcCartPromotion_00()  throws Throwable  {
      //caseID:7ca959bc0e2bafa4d024f1bdabc17d0c
      //CoveredLines: [24, 31, 33, 35, 36, 37, 38, 39, 40, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 266, 267, 270, 271]
      //Input_0_List<OmsCartItem>: linkedList1
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      LinkedList<PromotionProduct> linkedList0 = new LinkedList<PromotionProduct>();
      Long long0 = new Long(1564L);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(promotionProduct0).getId();
      doReturn("\u5355\u54C1\u4FC3\u9500").when(promotionProduct0).toString();
      
      linkedList0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      LinkedList<OmsCartItem> linkedList1 = new LinkedList<OmsCartItem>();
      Long long1 = new Long(0L);
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long1, long0).when(omsCartItem0).getProductId();
      doReturn("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$2").when(omsCartItem0).toString();
      
      linkedList1.add(omsCartItem0);
      Long long2 = new Long(0L);
      //mock omsCartItem1
      OmsCartItem omsCartItem1 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long2, long0).when(omsCartItem1).getProductId();
      doReturn("\u6298").when(omsCartItem1).toString();
      
      linkedList1.add(omsCartItem1);
      
      //Call method: calcCartPromotion
      // Undeclared exception!
      try { 
        omsPromotionServiceImpl0.calcCartPromotion(linkedList1);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_01()  throws Throwable  {
      //caseID:dd02e1422bb5617040241134003642a5
      //CoveredLines: [24, 31, 33, 35, 36, 37, 38, 39, 40, 41, 58, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 137, 138, 145, 146, 147, 148, 149, 150, 151, 152, 153, 177, 180, 183, 184, 185, 240, 241, 243, 244, 245, 246, 247, 254, 255, 256, 258, 259, 266, 267, 268]
      //Input_0_List<OmsCartItem>: stack1
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Vector<PromotionProduct> vector0 = new Vector<PromotionProduct>();
      Long long0 = new Long(1212L);
      Integer integer0 = Opcodes.LONG;
      ArrayList<PmsSkuStock> arrayList0 = new ArrayList<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(pmsSkuStock0).getId();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn("200").when(pmsSkuStock0).toString();
      
      arrayList0.add(pmsSkuStock0);
      Stack<PmsProductFullReduction> stack0 = new Stack<PmsProductFullReduction>();
      //mock pmsProductFullReduction0
      PmsProductFullReduction pmsProductFullReduction0 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(pmsProductFullReduction0).getFullPrice();
      //mock pmsProductFullReduction1
      PmsProductFullReduction pmsProductFullReduction1 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(pmsProductFullReduction1).getFullPrice();
      doReturn(bigDecimal0).when(pmsProductFullReduction1).getReducePrice();
      doReturn("\u65E0\u4F18\u60E0").when(pmsProductFullReduction1).toString();
      
      stack0.add(pmsProductFullReduction1);
      
      stack0.add(pmsProductFullReduction0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("200", "200", "200").when(promotionProduct0).toString();
      doReturn(stack0).when(promotionProduct0).getProductFullReductionList();
      doReturn(arrayList0, arrayList0).when(promotionProduct0).getSkuStockList();
      
      vector0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Stack<OmsCartItem> stack1 = new Stack<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long1 = new Long(580L);
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long1).when(omsCartItem0).getMemberId();
      doReturn("70").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("").when(omsCartItem0).getProductAttr();
      doReturn("1.0").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("207").when(omsCartItem0).getProductName();
      doReturn("\u5143").when(omsCartItem0).getProductPic();
      doReturn("^vP=<U>R{").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0, long1).when(omsCartItem0).getProductSkuId();
      doReturn("org.springframework.core.convert.support.ArrayToStringConverter").when(omsCartItem0).getProductSn();
      doReturn("The resultSelector returned a null value").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("200").when(omsCartItem0).toString();
      
      stack1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      // Undeclared exception!
      try { 
        omsPromotionServiceImpl0.calcCartPromotion(stack1);
      } catch(Throwable e) {
         verifyException("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_02()  throws Throwable  {
      //caseID:e6b2b7b4fc68ddb88102efe28d3986a7
      //CoveredLines: [24, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 108, 109, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 137, 138, 254, 255, 256, 266, 267, 268]
      //Input_0_List<OmsCartItem>: stack1
      //Assert: assertEquals(1, method_result.size());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      Long long0 = new Long(363L);
      Integer integer0 = Opcodes.INTEGER;
      ArrayList<PmsSkuStock> arrayList0 = new ArrayList<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPromotionPrice();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("w6 01uE").when(pmsSkuStock0).toString();
      
      arrayList0.add(pmsSkuStock0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("w6 01uE", "w6 01uE").when(promotionProduct0).toString();
      doReturn(arrayList0).when(promotionProduct0).getSkuStockList();
      
      stack0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Stack<OmsCartItem> stack1 = new Stack<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("w6 01uE").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("w6 01uE").when(omsCartItem0).getProductAttr();
      doReturn("w6 01uE").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("w6 01uE").when(omsCartItem0).getProductName();
      doReturn("w6 01uE").when(omsCartItem0).getProductPic();
      doReturn("w6 01uE").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("w6 01uE").when(omsCartItem0).getProductSn();
      doReturn("w6 01uE").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0).when(omsCartItem0).getQuantity();
      doReturn("w6 01uE").when(omsCartItem0).toString();
      
      stack1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(stack1);
      
      //Test Result Assert
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_03()  throws Throwable  {
      //caseID:b40964729820ae77579d245542200a79
      //CoveredLines: [24, 31, 33, 35, 36, 37, 38, 39, 40, 41, 58, 106, 108, 109, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 137, 138, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 254, 255, 256, 266, 267, 268]
      //Input_0_List<OmsCartItem>: stack1
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      Long long0 = new Long(2526L);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      ArrayList<PmsSkuStock> arrayList0 = new ArrayList<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("Gn").when(pmsSkuStock0).toString();
      
      arrayList0.add(pmsSkuStock0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("Gn", "Gn").when(promotionProduct0).toString();
      doReturn(arrayList0).when(promotionProduct0).getSkuStockList();
      
      stack0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Stack<OmsCartItem> stack1 = new Stack<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Gn").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Gn").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("Gn").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("Gn").when(omsCartItem0).getProductAttr();
      doReturn("Gn").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("Gn").when(omsCartItem0).getProductName();
      doReturn("Gn").when(omsCartItem0).getProductPic();
      doReturn("Gn").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("Gn").when(omsCartItem0).getProductSn();
      doReturn("Gn").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0).when(omsCartItem0).getQuantity();
      doReturn("Gn").when(omsCartItem0).toString();
      
      stack1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(stack1);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_04()  throws Throwable  {
      //caseID:fe9a182ccc685eafbcba9891e5942f83
      //CoveredLines: [24, 31, 33, 35, 36, 37, 38, 39, 40, 41, 58, 60, 61, 62, 79, 81, 108, 109, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 137, 138, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 211, 217, 222, 229, 230, 231, 232, 233, 254, 255, 258, 259, 266, 267, 268]
      //Input_0_List<OmsCartItem>: stack0
      //Assert: assertEquals(1, method_result.size());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Vector<PromotionProduct> vector0 = new Vector<PromotionProduct>();
      Long long0 = new Long(0L);
      Integer integer0 = Opcodes.DOUBLE;
      LinkedList<PmsProductLadder> linkedList0 = new LinkedList<PmsProductLadder>();
      ArrayList<PmsSkuStock> arrayList0 = new ArrayList<PmsSkuStock>();
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsSkuStock0).getId();
      
      arrayList0.add(pmsSkuStock0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("\u5143\uFF0C", "\u5143\uFF0C").when(promotionProduct0).toString();
      doReturn(linkedList0).when(promotionProduct0).getProductLadderList();
      doReturn(arrayList0).when(promotionProduct0).getSkuStockList();
      
      vector0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Stack<OmsCartItem> stack0 = new Stack<OmsCartItem>();
      Long long1 = new Long(1L);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(" \u21E2 ").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u5355\u54C1\u4FC3\u9500").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("550").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("6").when(omsCartItem0).getProductAttr();
      doReturn("~W$Yq*;\"").when(omsCartItem0).getProductBrand();
      doReturn(long1).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("").when(omsCartItem0).getProductName();
      doReturn("(lxtxuGaI@USoHV ").when(omsCartItem0).getProductPic();
      doReturn("2771").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long1).when(omsCartItem0).getProductSkuId();
      doReturn("\u6253").when(omsCartItem0).getProductSn();
      doReturn("1.0").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("\u5143\uFF0C").when(omsCartItem0).toString();
      
      stack0.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(stack0);
      
      //Test Result Assert
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_05()  throws Throwable  {
      //caseID:193883268dfa34b82e7633d1324038ca
      //CoveredLines: [24, 31, 33, 35, 36, 37, 38, 39, 40, 41, 58, 83, 84, 85, 102, 104, 108, 109, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 137, 138, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 177, 183, 188, 240, 241, 243, 244, 245, 246, 247, 254, 255, 256, 266, 267, 268]
      //Input_0_List<OmsCartItem>: stack1
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Vector<PromotionProduct> vector0 = new Vector<PromotionProduct>();
      Long long0 = new Long(0L);
      Integer integer0 = Opcodes.LONG;
      ArrayList<PmsSkuStock> arrayList0 = new ArrayList<PmsSkuStock>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("Gn", "Gn").when(pmsSkuStock0).toString();
      
      arrayList0.add(pmsSkuStock0);
      Stack<PmsProductFullReduction> stack0 = new Stack<PmsProductFullReduction>();
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0, long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("Gn", "Gn", "Gn").when(promotionProduct0).toString();
      doReturn(stack0).when(promotionProduct0).getProductFullReductionList();
      doReturn(arrayList0, arrayList0).when(promotionProduct0).getSkuStockList();
      
      vector0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Stack<OmsCartItem> stack1 = new Stack<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Gn").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Gn").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("Gn").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("Gn").when(omsCartItem0).getProductAttr();
      doReturn("Gn").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("Gn").when(omsCartItem0).getProductName();
      doReturn("Gn").when(omsCartItem0).getProductPic();
      doReturn("Gn").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("Gn").when(omsCartItem0).getProductSn();
      doReturn("Gn").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("Gn").when(omsCartItem0).toString();
      
      stack1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(stack1);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_06()  throws Throwable  {
      //caseID:38af87612b95bd6f0cba3721dd2bc687
      //CoveredLines: [24, 31, 33, 35, 36, 37, 38, 39, 40, 41, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 108, 109, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 137, 138, 195, 196, 197, 198, 199, 200, 201, 202, 203, 211, 217, 218, 219, 229, 230, 231, 232, 233, 254, 255, 256, 258, 266, 267, 268]
      //Input_0_List<OmsCartItem>: stack1
      //Assert: assertEquals(1, method_result.size());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PromotionProduct> stack0 = new Stack<PromotionProduct>();
      Long long0 = new Long((-9L));
      Integer integer0 = Opcodes.DOUBLE;
      LinkedList<PmsProductLadder> linkedList0 = new LinkedList<PmsProductLadder>();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock pmsProductLadder0
      PmsProductLadder pmsProductLadder0 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(pmsProductLadder0).getCount();
      doReturn(bigDecimal0, bigDecimal0).when(pmsProductLadder0).getDiscount();
      doReturn("\u51CF").when(pmsProductLadder0).toString();
      
      linkedList0.add(pmsProductLadder0);
      Vector<PmsSkuStock> vector0 = new Vector<PmsSkuStock>();
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(pmsSkuStock0).getId();
      doReturn(integer0).when(pmsSkuStock0).getLockStock();
      doReturn(bigDecimal0).when(pmsSkuStock0).getPrice();
      doReturn(integer0).when(pmsSkuStock0).getStock();
      doReturn("\u51CF").when(pmsSkuStock0).toString();
      Long long1 = new Long(0L);
      //mock pmsSkuStock1
      PmsSkuStock pmsSkuStock1 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1).when(pmsSkuStock1).getId();
      
      vector0.add(pmsSkuStock1);
      
      vector0.add(pmsSkuStock0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("\u51CF", "\u51CF").when(promotionProduct0).toString();
      doReturn(linkedList0).when(promotionProduct0).getProductLadderList();
      doReturn(vector0).when(promotionProduct0).getSkuStockList();
      
      stack0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Stack<OmsCartItem> stack1 = new Stack<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u51CF").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("181").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("\u51CF").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("\u51CF").when(omsCartItem0).getProductAttr();
      doReturn("\u51CF").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("\u51CF").when(omsCartItem0).getProductName();
      doReturn("\u51CF").when(omsCartItem0).getProductPic();
      doReturn("\u51CF").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("\u51CF").when(omsCartItem0).getProductSn();
      doReturn("\u51CF").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("\u51CF").when(omsCartItem0).toString();
      
      stack1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(stack1);
      
      //Test Result Assert
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test_calcCartPromotion_07()  throws Throwable  {
      //caseID:6eb6d997d24f7328cee584fde86b50ee
      //CoveredLines: [24, 31, 33, 35, 36, 37, 38, 39, 40, 41, 58, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 108, 109, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 137, 138, 145, 146, 147, 148, 149, 150, 151, 152, 153, 177, 183, 184, 185, 240, 241, 243, 244, 245, 246, 247, 254, 255, 256, 258, 266, 267, 268]
      //Input_0_List<OmsCartItem>: stack1
      //Assert: assertFalse(method_result.isEmpty());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Vector<PromotionProduct> vector0 = new Vector<PromotionProduct>();
      Long long0 = new Long(0L);
      Integer integer0 = Opcodes.LONG;
      ArrayList<PmsSkuStock> arrayList0 = new ArrayList<PmsSkuStock>();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Long long1 = new Long(2L);
      //mock pmsSkuStock0
      PmsSkuStock pmsSkuStock0 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1, long1).when(pmsSkuStock0).getId();
      
      arrayList0.add(pmsSkuStock0);
      //mock pmsSkuStock1
      PmsSkuStock pmsSkuStock1 = mock(PmsSkuStock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(pmsSkuStock1).getId();
      doReturn(integer0).when(pmsSkuStock1).getLockStock();
      doReturn(bigDecimal0, bigDecimal0).when(pmsSkuStock1).getPrice();
      doReturn(integer0).when(pmsSkuStock1).getStock();
      doReturn("200", "com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$1").when(pmsSkuStock1).toString();
      
      arrayList0.add(pmsSkuStock1);
      Stack<PmsProductFullReduction> stack0 = new Stack<PmsProductFullReduction>();
      //mock pmsProductFullReduction0
      PmsProductFullReduction pmsProductFullReduction0 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(pmsProductFullReduction0).getFullPrice();
      doReturn(bigDecimal0, bigDecimal0).when(pmsProductFullReduction0).getReducePrice();
      doReturn("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$1").when(pmsProductFullReduction0).toString();
      
      stack0.add(pmsProductFullReduction0);
      //mock promotionProduct0
      PromotionProduct promotionProduct0 = mock(PromotionProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(promotionProduct0).getGiftGrowth();
      doReturn(integer0).when(promotionProduct0).getGiftPoint();
      doReturn(long0, long0).when(promotionProduct0).getId();
      doReturn(integer0).when(promotionProduct0).getPromotionType();
      doReturn("200", "200", "com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$1").when(promotionProduct0).toString();
      doReturn(stack0).when(promotionProduct0).getProductFullReductionList();
      doReturn(arrayList0, arrayList0).when(promotionProduct0).getSkuStockList();
      
      vector0.add(promotionProduct0);
      //mock portalProductDao0
      PortalProductDao portalProductDao0 = mock(PortalProductDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(portalProductDao0).getPromotionProductList(ArgumentMatchers.<java.lang.Long>anyList());
      
      PrivateAccess.setVariable((Class<?>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "portalProductDao", (Object) portalProductDao0);
      Stack<OmsCartItem> stack1 = new Stack<OmsCartItem>();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("87").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("87").when(date1).toString();
      //mock omsCartItem0
      OmsCartItem omsCartItem0 = mock(OmsCartItem.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date1).when(omsCartItem0).getCreateDate();
      doReturn(integer0).when(omsCartItem0).getDeleteStatus();
      doReturn(long0).when(omsCartItem0).getId();
      doReturn(long0).when(omsCartItem0).getMemberId();
      doReturn("200").when(omsCartItem0).getMemberNickname();
      doReturn(date0).when(omsCartItem0).getModifyDate();
      doReturn(bigDecimal0).when(omsCartItem0).getPrice();
      doReturn("200").when(omsCartItem0).getProductAttr();
      doReturn("200").when(omsCartItem0).getProductBrand();
      doReturn(long0).when(omsCartItem0).getProductCategoryId();
      doReturn(long0, long0, long0, long0, long0).when(omsCartItem0).getProductId();
      doReturn("200").when(omsCartItem0).getProductName();
      doReturn("200").when(omsCartItem0).getProductPic();
      doReturn("200").when(omsCartItem0).getProductSkuCode();
      doReturn(long0, long0, long0).when(omsCartItem0).getProductSkuId();
      doReturn("200").when(omsCartItem0).getProductSn();
      doReturn("com.macro.mall.portal.service.impl.OmsPromotionServiceImpl$1").when(omsCartItem0).getProductSubTitle();
      doReturn(integer0, integer0).when(omsCartItem0).getQuantity();
      doReturn("1.0").when(omsCartItem0).toString();
      
      stack1.add(omsCartItem0);
      
      //Call method: calcCartPromotion
      List<CartPromotionItem> list0 = omsPromotionServiceImpl0.calcCartPromotion(stack1);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getProductFullReduction_08()  throws Throwable  {
      //caseID:a871a110dcb5686646e8f041d559cf0b
      //CoveredLines: [24, 177, 183, 184, 187, 188]
      //Input_0_BigDecimal: BigDecimal.ONE
      //Input_1_List<com.macro.mall.model.PmsProductFullReduction>: linkedList0
      //Assert: assertNull(method_result);
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      LinkedList<PmsProductFullReduction> linkedList0 = new LinkedList<PmsProductFullReduction>();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      //mock pmsProductFullReduction0
      PmsProductFullReduction pmsProductFullReduction0 = mock(PmsProductFullReduction.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal1).when(pmsProductFullReduction0).getFullPrice();
      
      linkedList0.add(pmsProductFullReduction0);
      
      //Call method: getProductFullReduction
      Object object0 = PrivateAccess.callMethod((Class<OmsPromotionServiceImpl>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "getProductFullReduction", (Object) bigDecimal0, (Class<?>) BigDecimal.class, (Object) linkedList0, (Class<?>) List.class);
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getProductLadder_09()  throws Throwable  {
      //caseID:3cd63487d57a0538d62823ac7a938b80
      //CoveredLines: [24, 211, 214, 217, 218, 219]
      //Input_0_int: 10
      //Input_1_List<com.macro.mall.model.PmsProductLadder>: stack0
      //Assert: assertNotNull(method_result);
      //Assert: assertNull(method_result.getProductId());
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Stack<PmsProductLadder> stack0 = new Stack<PmsProductLadder>();
      Integer integer0 = new Integer(44);
      Integer integer1 = Opcodes.NULL;
      //mock pmsProductLadder0
      PmsProductLadder pmsProductLadder0 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer1).when(pmsProductLadder0).getCount();
      doReturn("Function must not be null").when(pmsProductLadder0).toString();
      
      stack0.add(pmsProductLadder0);
      //mock pmsProductLadder1
      PmsProductLadder pmsProductLadder1 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsProductLadder1).getCount();
      
      stack0.add(pmsProductLadder1);
      
      //Call method: getProductLadder
      PmsProductLadder pmsProductLadder2 = (PmsProductLadder)PrivateAccess.callMethod((Class<OmsPromotionServiceImpl>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "getProductLadder", (Object) 10, (Class<?>) int.class, (Object) stack0, (Class<?>) List.class);
      
      //Test Result Assert
      assertNotNull(pmsProductLadder2);
      
      //Test Result Assert
      assertNull(pmsProductLadder2.getProductId());
  }

  @Test(timeout = 4000)
  public void test_getProductLadder_10()  throws Throwable  {
      //caseID:7c7418ac89e7ace78b7248bd46612ddb
      //CoveredLines: [24, 211, 217, 218, 221, 222]
      //Input_0_int: 3
      //Input_1_List<com.macro.mall.model.PmsProductLadder>: vector0
      //Assert: assertNull(method_result);
      
      OmsPromotionServiceImpl omsPromotionServiceImpl0 = new OmsPromotionServiceImpl();
      Vector<PmsProductLadder> vector0 = new Vector<PmsProductLadder>();
      Integer integer0 = Opcodes.NULL;
      //mock pmsProductLadder0
      PmsProductLadder pmsProductLadder0 = mock(PmsProductLadder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(pmsProductLadder0).getCount();
      
      vector0.add(pmsProductLadder0);
      
      //Call method: getProductLadder
      Object object0 = PrivateAccess.callMethod((Class<OmsPromotionServiceImpl>) OmsPromotionServiceImpl.class, omsPromotionServiceImpl0, "getProductLadder", (Object) 3, (Class<?>) int.class, (Object) vector0, (Class<?>) List.class);
      
      //Test Result Assert
      assertNull(object0);
  }
}
