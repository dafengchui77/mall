/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.bo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.bo.AdminUserDetails;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsResource;
import java.util.ArrayList;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.asm.Opcodes;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AdminUserDetails_SSTest extends AdminUserDetails_SSTest_scaffolding {
// allCoveredLines:[23, 24, 25, 26, 31, 32, 33, 38, 43, 48, 53, 58, 63]

  @Test(timeout = 4000)
  public void test_getAuthorities_0()  throws Throwable  {
      //caseID:2169b9d3ce90d0516461b54cedb665fc
      //CoveredLines: [23, 24, 25, 26, 31, 32, 32, 33, 48, 53, 58, 63]
      //Assert: assertTrue(adminUserDetails0.isAccountNonExpired());
      
      Integer integer0 = Opcodes.NULL;
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsAdmin0).getStatus();
      ArrayList<UmsResource> arrayList0 = new ArrayList<UmsResource>();
      Long long0 = new Long(0L);
      //mock umsResource0
      UmsResource umsResource0 = mock(UmsResource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsResource0).getId();
      doReturn("").when(umsResource0).getName();
      arrayList0.add(umsResource0);
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, arrayList0);
      boolean boolean0 = adminUserDetails0.isCredentialsNonExpired();
      adminUserDetails0.isEnabled();
      boolean boolean1 = adminUserDetails0.isAccountNonExpired();
      
      //Test Result Assert
      assertTrue(boolean1);
      
      boolean boolean2 = adminUserDetails0.isAccountNonLocked();
      
      //Test Result Assert
      assertTrue(boolean2 == boolean0);
      
      
      //Call method: getAuthorities
      adminUserDetails0.getAuthorities();
      
      //Test Result Assert
      assertTrue(adminUserDetails0.isAccountNonExpired());
  }

  @Test(timeout = 4000)
  public void test_getPassword_1()  throws Throwable  {
      //caseID:5fc047f736fccd4b3bf8065e2f729dff
      //CoveredLines: [23, 24, 25, 26, 38]
      //Assert: assertNull(method_result);
      
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ArrayList<UmsResource> arrayList0 = new ArrayList<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, arrayList0);
      
      //Call method: getPassword
      String string0 = adminUserDetails0.getPassword();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getUsername_2()  throws Throwable  {
      //caseID:1783fa7d4055caa7d511b2ea91eda7d2
      //CoveredLines: [23, 24, 25, 26, 43]
      //Assert: assertNull(method_result);
      
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, stack0);
      
      //Call method: getUsername
      String string0 = adminUserDetails0.getUsername();
      
      //Test Result Assert
      assertNull(string0);
  }
}
