/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.bo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.bo.AdminUserDetails;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsResource;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.core.GrantedAuthority;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AdminUserDetails_SSTest extends AdminUserDetails_SSTest_scaffolding {
// allCoveredLines:[23, 24, 25, 26, 31, 32, 33, 38, 43, 48, 53, 58, 63]

  @Test(timeout = 4000)
  public void test_getAuthorities_0()  throws Throwable  {
      //caseID:097ff339e7178b0e50768fe71920f8ac
      //CoveredLines: [23, 24, 25, 26, 31, 32, 32, 33]
      //Assert: assertNotNull(method_result);
      
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, linkedList0);
      
      //Call method: getAuthorities
      Collection<? extends GrantedAuthority> collection0 = adminUserDetails0.getAuthorities();
      
      //Test Result Assert
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test_getUsername_1()  throws Throwable  {
      //caseID:21550fc157e4abfb796969186632e9cd
      //CoveredLines: [23, 24, 25, 26, 43, 48, 58, 63]
      //Assert: assertTrue(adminUserDetails0.isAccountNonExpired());
      
      Integer integer0 = new Integer(0);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsAdmin0).getStatus();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, stack0);
      boolean boolean0 = adminUserDetails0.isAccountNonExpired();
      
      //Test Result Assert
      assertTrue(boolean0);
      
      boolean boolean1 = adminUserDetails0.isEnabled();
      boolean boolean2 = adminUserDetails0.isCredentialsNonExpired();
      
      //Test Result Assert
      assertFalse(boolean2 == boolean1);
      
      
      //Call method: getUsername
      adminUserDetails0.getUsername();
      
      //Test Result Assert
      assertTrue(adminUserDetails0.isAccountNonExpired());
  }

  @Test(timeout = 4000)
  public void test_getUsername_2()  throws Throwable  {
      //caseID:0d78c83e8bec2d8f248416e5d49ca0d8
      //CoveredLines: [23, 24, 25, 26, 38, 48, 53, 58, 63]
      
      Integer integer0 = new Integer(0);
      //mock umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsAdmin0).getStatus();
      Stack<UmsResource> stack0 = new Stack<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, stack0);
      boolean boolean0 = adminUserDetails0.isAccountNonLocked();
      boolean boolean1 = adminUserDetails0.isCredentialsNonExpired();
      
      //Test Result Assert
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = adminUserDetails0.isEnabled();
      boolean boolean3 = adminUserDetails0.isAccountNonExpired();
      
      //Test Result Assert
      assertFalse(boolean3 == boolean2);
      
      adminUserDetails0.getPassword();
      
      //Test Result Assert
      assertTrue(adminUserDetails0.isAccountNonLocked());
  }
}
